from datetime import UTC, datetime

from t8_client.utils import (
    decode_array,
    format_timestamp,
    format_timestamps,
    parse_pmode_item,
    parse_wave_item,
)


def test_parse_wave_item():
    link = {
        "_links": {
            "self": "http://lzfs45.mirror.twave.io/lzfs45/rest/waves/LP_Turbine/MAD32CY005/AM2/1554907724"
        }
    }
    expected = 1554907724

    # datetime(2019, 4, 10, 14, 48, 44, tzinfo=UTC)
    assert parse_wave_item(link) == expected


def test_parse_pmode_item():
    link = {
        "_links": {
            "self": "http://lzfs45.mirror.twave.io/lzfs45/rest/waves/LP_Turbine/MAD32CY005/AM2/"
        }
    }

    expected = {"machine": "LP_Turbine", "point": "MAD32CY005", "pmode": "AM2"}
    assert parse_pmode_item(link) == expected


def test_format_timestamp():
    timestamp = 1633024800  # example timestamp
    result = format_timestamp(timestamp)
    expected = datetime.fromtimestamp(timestamp, tz=UTC).isoformat()
    assert result == expected


def test_format_timestamps():
    timestamps = [1633024800, 0, 1633111200]
    result = format_timestamps(timestamps)
    expected = [
        datetime.fromtimestamp(1633024800, tz=UTC).isoformat(),
        datetime.fromtimestamp(1633111200, tz=UTC).isoformat(),
    ]
    assert result == expected


def test_decode_array():
    zint_raw = b""  # noqa: E501
    array_len = 4096
    first_value = -31540.0

    result = decode_array(zint_raw, fmt="zint")
    assert len(result) == array_len
    assert result[0] == first_value
